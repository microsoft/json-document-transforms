<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DefaultSourceFileName" xml:space="preserve">
    <value>Source</value>
    <comment>The default name for transformation source files</comment>
  </data>
  <data name="DefaultTransformFileName" xml:space="preserve">
    <value>Transform</value>
    <comment>The default name for transformation files</comment>
  </data>
  <data name="ErrorMessage_InvalidAttribute" xml:space="preserve">
    <value>{0} is not a valid attribute for this transformation</value>
    <comment>The error message to be displayed if an invalid attribute is found</comment>
  </data>
  <data name="ErrorMessage_InvalidAttributes" xml:space="preserve">
    <value>Invalid transformation attributes</value>
    <comment>The error message to be displayed if invalid attributes are found</comment>
  </data>
  <data name="ErrorMessage_InvalidInlineVerb" xml:space="preserve">
    <value>{0} is not a valid JDT inline verb</value>
  </data>
  <data name="ErrorMessage_InvalidRemoveValue" xml:space="preserve">
    <value>{0} is not a valid transform value for Remove</value>
    <comment>The error message to be displayed when an invalid remove value is applied</comment>
  </data>
  <data name="ErrorMessage_InvalidRenameValue" xml:space="preserve">
    <value>{0} is not a valid transform value for Rename</value>
    <comment>The error message to be displayed when an invalid rename value is applied</comment>
  </data>
  <data name="ErrorMessage_InvalidVerb" xml:space="preserve">
    <value>{0} is not a valid JDT verb</value>
    <comment>The error message to be displayed if an invalid verb is found</comment>
  </data>
  <data name="ErrorMessage_MergeAttributes" xml:space="preserve">
    <value>Merge requires both path and value</value>
    <comment>The error message to be displayed when the wrong attributes are found for merge</comment>
  </data>
  <data name="ErrorMessage_PathContents" xml:space="preserve">
    <value>Path attribute must be a string</value>
    <comment>The error message to be displayed if the wrong value for path is found</comment>
  </data>
  <data name="ErrorMessage_RemoveAttributes" xml:space="preserve">
    <value>Remove requires the path attribute</value>
    <comment>The error message to be displayed when the wrong attributes are found for remove</comment>
  </data>
  <data name="ErrorMessage_RemoveRoot" xml:space="preserve">
    <value>Cannot remove root</value>
    <comment>The error message to be displayed if the user attempts to remove the root object in the JSON</comment>
  </data>
  <data name="ErrorMessage_RenameAttributes" xml:space="preserve">
    <value>Rename requires both path and value attributes</value>
    <comment>The error message to be displayed when the wrong attributes are found for rename</comment>
  </data>
  <data name="ErrorMessage_RenameNode" xml:space="preserve">
    <value>Cannot rename node</value>
    <comment>The error message to be displayed if the user attemps to rename a node without a name</comment>
  </data>
  <data name="ErrorMessage_ReplaceAttributes" xml:space="preserve">
    <value>Replace requires both path and value attributes</value>
    <comment>The error message to be displayed when the wrong attributes are found for replace</comment>
  </data>
  <data name="ErrorMessage_ReplaceRoot" xml:space="preserve">
    <value>Cannot replace root</value>
    <comment>The error message to be displayed if the user attempts to replace the root object in the JSON</comment>
  </data>
  <data name="ErrorMessage_ValueContents" xml:space="preserve">
    <value>Value attribute must be a string</value>
    <comment>The error message to be displayed if the wrong value for value is found</comment>
  </data>
  <data name="WarningMessage_NodeNotFound" xml:space="preserve">
    <value>Node {0} was not found</value>
    <comment>The error message to be displayed when the specified node is not found</comment>
  </data>
  <data name="WarningMessage_NoResults" xml:space="preserve">
    <value>No nodes match the given path</value>
    <comment>The warning message to be displayed if a path query does not yield any results</comment>
  </data>
  <data name="WarningMessage_UnableToRemove" xml:space="preserve">
    <value>Unable to remove node</value>
    <comment>The warning message to be displayed if a node is not removed as specified</comment>
  </data>
</root>